/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List domains */
        get: operations["listDomains"];
        put?: never;
        /** @description Create domain */
        post: operations["createDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/domains/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get domain */
        get: operations["getDomain"];
        put?: never;
        post?: never;
        /** @description Delete domain */
        delete: operations["deleteDomain"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/domains/{id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Verify domain */
        put: operations["verifyDomain"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/emails/{emailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Email */
        get: operations["getEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update schedule */
        patch: operations["updateSchedule"];
        trace?: never;
    };
    "/v1/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List emails */
        get: operations["listEmails"];
        put?: never;
        /** @description Send email */
        post: operations["sendEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/emails/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Batch email */
        post: operations["batchEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/emails/{emailId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Cancel schedule */
        post: operations["cancelSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/contactBooks/{contactBookId}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get contacts */
        get: operations["getContacts"];
        put?: never;
        /** @description Create contact */
        post: operations["createContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/contactBooks/{contactBookId}/contacts/{contactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get contact */
        get: operations["getContact"];
        /** @description Upsert contact */
        put: operations["upsertContact"];
        post?: never;
        /** @description Delete contact */
        delete: operations["deleteContact"];
        options?: never;
        head?: never;
        /** @description Update contact */
        patch: operations["updateContact"];
        trace?: never;
    };
    "/v1/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create campaign */
        post: operations["createCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/campaigns/{campaignId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get campaign */
        get: operations["getCampaign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/campaigns/{campaignId}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Schedule campaign */
        post: operations["scheduleCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/campaigns/{campaignId}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Pause campaign */
        post: operations["pauseCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/campaigns/{campaignId}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Resume campaign */
        post: operations["resumeCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DomainDnsRecord: {
            /**
             * @description DNS record type
             * @example TXT
             * @enum {string}
             */
            type: "MX" | "TXT";
            /**
             * @description DNS record name
             * @example mail
             */
            name: string;
            /**
             * @description DNS record value
             * @example v=spf1 include:amazonses.com ~all
             */
            value: string;
            /**
             * @description DNS record TTL
             * @example Auto
             */
            ttl: string;
            /**
             * @description DNS record priority
             * @example 10
             */
            priority?: string | null;
            /** @enum {string} */
            status: "NOT_STARTED" | "PENDING" | "SUCCESS" | "FAILED" | "TEMPORARY_FAILURE";
            /** @description Whether the record is recommended */
            recommended?: boolean;
        };
        Domain: {
            /**
             * @description The ID of the domain
             * @example 1
             */
            id: number;
            /**
             * @description The name of the domain
             * @example example.com
             */
            name: string;
            /**
             * @description The ID of the team
             * @example 1
             */
            teamId: number;
            /** @enum {string} */
            status: "NOT_STARTED" | "PENDING" | "SUCCESS" | "FAILED" | "TEMPORARY_FAILURE";
            /** @default us-east-1 */
            region: string;
            /** @default false */
            clickTracking: boolean;
            /** @default false */
            openTracking: boolean;
            publicKey: string;
            dkimStatus?: string | null;
            spfDetails?: string | null;
            createdAt: string;
            updatedAt: string;
            /** @default false */
            dmarcAdded: boolean;
            /** @default false */
            isVerifying: boolean;
            errorMessage?: string | null;
            subdomain?: string | null;
            verificationError?: string | null;
            lastCheckedTime?: string | null;
            dnsRecords: components["schemas"]["DomainDnsRecord"][];
        };
        CreateDomainRequest: {
            name: string;
            region: string;
        };
        CreateDomainResponse: components["schemas"]["Domain"];
        VerifyDomainResponse: {
            message: string;
        };
        ErrorResponse: {
            error: string;
        };
        DeleteDomainResponse: {
            id: number;
            success: boolean;
            message: string;
        };
        EmailEvent: {
            emailId: string;
            /** @enum {string} */
            status: "SCHEDULED" | "QUEUED" | "SENT" | "DELIVERY_DELAYED" | "BOUNCED" | "REJECTED" | "RENDERING_FAILURE" | "DELIVERED" | "OPENED" | "CLICKED" | "COMPLAINED" | "FAILED" | "CANCELLED" | "SUPPRESSED";
            createdAt: string;
            data?: unknown;
        };
        Email: {
            id: string;
            teamId: number;
            to: string | string[];
            replyTo?: string | string[];
            cc?: string | string[];
            bcc?: string | string[];
            from: string;
            subject: string;
            html: string | null;
            text: string | null;
            createdAt: string;
            updatedAt: string;
            emailEvents: components["schemas"]["EmailEvent"][];
        };
        UpdateScheduleRequest: {
            /** Format: date-time */
            scheduledAt: string;
        };
        UpdateScheduleResponse: {
            emailId?: string;
        };
        ListEmailsResponse: {
            data: components["schemas"]["ListEmailsResponse_data"][];
            count: number;
        };
        SendEmailAttachment: {
            filename: string;
            content: string;
        };
        SendEmailRequest: {
            to: string | string[];
            from: string;
            /** @description Optional when templateId is provided */
            subject?: string;
            /** @description ID of a template from the dashboard */
            templateId?: string;
            variables?: {
                [key: string]: string;
            };
            replyTo?: string | string[];
            cc?: string | string[];
            bcc?: string | string[];
            text?: string | null;
            html?: string | null;
            /** @description Custom headers to included with the emails */
            headers?: {
                [key: string]: string;
            };
            attachments?: components["schemas"]["SendEmailAttachment"][];
            /** Format: date-time */
            scheduledAt?: string;
            inReplyToId?: string | null;
        };
        SendEmailResponse: {
            emailId?: string;
        };
        BatchEmailRequestItem: {
            to: string | string[];
            from: string;
            /** @description Optional when templateId is provided */
            subject?: string;
            /** @description ID of a template from the dashboard */
            templateId?: string;
            variables?: {
                [key: string]: string;
            };
            replyTo?: string | string[];
            cc?: string | string[];
            bcc?: string | string[];
            text?: string | null;
            html?: string | null;
            /** @description Custom headers to included with the emails */
            headers?: {
                [key: string]: string;
            };
            attachments?: components["schemas"]["SendEmailAttachment"][];
            /** Format: date-time */
            scheduledAt?: string;
            inReplyToId?: string | null;
        };
        BatchEmailRequest: components["schemas"]["BatchEmailRequestItem"][];
        BatchEmailResponseItem: {
            emailId: string;
        };
        BatchEmailResponse: {
            data: components["schemas"]["BatchEmailResponseItem"][];
        };
        CancelScheduleResponse: {
            emailId?: string;
        };
        CreateContactRequest: {
            email: string;
            firstName?: string;
            lastName?: string;
            properties?: {
                [key: string]: string;
            };
            subscribed?: boolean;
        };
        CreateContactResponse: {
            contactId?: string;
        };
        Contact: {
            id: string;
            firstName?: string | null;
            lastName?: string | null;
            email: string;
            /** @default true */
            subscribed: boolean;
            properties: {
                [key: string]: string;
            };
            contactBookId: string;
            createdAt: string;
            updatedAt: string;
        };
        UpdateContactRequest: {
            firstName?: string;
            lastName?: string;
            properties?: {
                [key: string]: string;
            };
            subscribed?: boolean;
        };
        UpdateContactResponse: {
            contactId?: string;
        };
        UpsertContactRequest: {
            email: string;
            firstName?: string;
            lastName?: string;
            properties?: {
                [key: string]: string;
            };
            subscribed?: boolean;
        };
        UpsertContactResponse: {
            contactId: string;
        };
        DeleteContactResponse: {
            success: boolean;
        };
        CreateCampaignRequest: {
            name: string;
            from: string;
            subject: string;
            previewText?: string;
            contactBookId: string;
            content?: string;
            html?: string;
            replyTo?: string | string[];
            cc?: string | string[];
            bcc?: string | string[];
            sendNow?: boolean;
            /** @description Timestamp in ISO 8601 format or natural language (e.g., 'tomorrow 9am', 'next monday 10:30') */
            scheduledAt?: string;
            batchSize?: number;
        };
        Campaign: {
            id: string;
            name: string;
            from: string;
            subject: string;
            previewText: string | null;
            contactBookId: string | null;
            html: string | null;
            content: string | null;
            status: string;
            /** Format: date-time */
            scheduledAt: string | null;
            batchSize: number;
            batchWindowMinutes: number;
            total: number;
            sent: number;
            delivered: number;
            opened: number;
            clicked: number;
            unsubscribed: number;
            bounced: number;
            hardBounced: number;
            complained: number;
            replyTo: string[];
            cc: string[];
            bcc: string[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ScheduleCampaignRequest: {
            /** @description Timestamp in ISO 8601 format or natural language (e.g., 'tomorrow 9am', 'next monday 10:30') */
            scheduledAt?: string;
            batchSize?: number;
        };
        ScheduleCampaignResponse: {
            success: boolean;
        };
        SuccessResponse: {
            success: boolean;
        };
        /** @example 123 */
        domainId: string | string[];
        ListEmailsResponse_data: {
            id: string;
            to: string | string[];
            replyTo?: (string | string[]) | null;
            cc?: (string | string[]) | null;
            bcc?: (string | string[]) | null;
            from: string;
            subject: string;
            html: string | null;
            text: string | null;
            createdAt: string;
            updatedAt: string;
            /** @enum {string|null} */
            latestStatus: "SCHEDULED" | "QUEUED" | "SENT" | "DELIVERY_DELAYED" | "BOUNCED" | "REJECTED" | "RENDERING_FAILURE" | "DELIVERED" | "OPENED" | "CLICKED" | "COMPLAINED" | "FAILED" | "CANCELLED" | "SUPPRESSED" | null;
            /** Format: date-time */
            scheduledAt: string | null;
            domainId: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listDomains: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve domains accessible by the API key */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Domain"][];
                };
            };
        };
    };
    createDomain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDomainRequest"];
            };
        };
        responses: {
            /** @description Create a new domain */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDomainResponse"];
                };
            };
        };
    };
    getDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve the domain */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Domain"];
                };
            };
        };
    };
    deleteDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Domain deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDomainResponse"];
                };
            };
            /** @description Forbidden - API key doesn't have access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Domain not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    verifyDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Verify domain */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyDomainResponse"];
                };
            };
            /** @description Forbidden - API key doesn't have access to this domain */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Domain not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve the email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Email"];
                };
            };
        };
    };
    updateSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateScheduleRequest"];
            };
        };
        responses: {
            /** @description Updated schedule */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
        };
    };
    listEmails: {
        parameters: {
            query?: {
                page?: string;
                limit?: string;
                startDate?: string;
                endDate?: string;
                domainId?: components["schemas"]["domainId"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of emails */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListEmailsResponse"];
                };
            };
        };
    };
    sendEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmailRequest"];
            };
        };
        responses: {
            /** @description Successfully created email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendEmailResponse"];
                };
            };
        };
    };
    batchEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchEmailRequest"];
            };
        };
        responses: {
            /** @description List of successfully created email IDs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchEmailResponse"];
                };
            };
        };
    };
    cancelSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Canceled email ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelScheduleResponse"];
                };
            };
        };
    };
    getContacts: {
        parameters: {
            query?: {
                emails?: string;
                page?: number;
                limit?: number;
                ids?: string;
            };
            header?: never;
            path: {
                contactBookId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve multiple contacts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"][];
                };
            };
        };
    };
    createContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactBookId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateContactRequest"];
            };
        };
        responses: {
            /** @description Successfully created contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateContactResponse"];
                };
            };
        };
    };
    getContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactBookId: string;
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve the contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"];
                };
            };
        };
    };
    upsertContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactBookId: string;
                contactId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertContactRequest"];
            };
        };
        responses: {
            /** @description Contact upserted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpsertContactResponse"];
                };
            };
        };
    };
    deleteContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactBookId: string;
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contact deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteContactResponse"];
                };
            };
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactBookId: string;
                contactId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContactRequest"];
            };
        };
        responses: {
            /** @description Successfully updated contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateContactResponse"];
                };
            };
        };
    };
    createCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCampaignRequest"];
            };
        };
        responses: {
            /** @description Create a campaign */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    getCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaignId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get campaign details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
        };
    };
    scheduleCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaignId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleCampaignRequest"];
            };
        };
        responses: {
            /** @description Schedule a campaign */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleCampaignResponse"];
                };
            };
        };
    };
    pauseCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaignId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pause a campaign */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    resumeCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaignId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resume a campaign */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
}
